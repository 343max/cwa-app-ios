// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: exposure_keys.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// e.g. Country-Code
  var shardKey: String = String()

  /// publishing timestamp of this exposure key package - unix epoch
  var timestamp: Int32 = 0

  /// time interval aggregated in this package
  var aggregationInterval: Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket.AggregationInterval = .hourly

  /// list of temporary exposure keys
  var exposureKeys: [Org_Ena_Backend_Server_Protocols_TemporaryExposureKey] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AggregationInterval: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Aggregation of 1 hour / 60 minutes
    case hourly // = 0

    /// Aggregation of 24 hours / 1440 minutes
    case daily // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .hourly
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .hourly
      case 1: self = .daily
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .hourly: return 0
      case .daily: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket.AggregationInterval: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket.AggregationInterval] = [
    .hourly,
    .daily,
  ]
}

#endif  // swift(>=4.2)

struct Org_Ena_Backend_Server_Protocols_TemporaryExposureKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 16 bytes long exposure key
  var keyData: Data = SwiftProtobuf.Internal.emptyData

  /// unix epoch timestamp / 600
  var rollingStartNumber: Int32 = 0

  /// risk level from the sending device
  var riskLevel: Org_Ena_Backend_Server_Protocols_TemporaryExposureKey.RiskLevel = .invalid

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RiskLevel: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalid // = 0
    case lowest // = 1
    case low // = 2
    case lowMedium // = 3
    case medium // = 4
    case mediumHigh // = 5
    case high // = 6
    case veryHigh // = 7
    case highest // = 8
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .lowest
      case 2: self = .low
      case 3: self = .lowMedium
      case 4: self = .medium
      case 5: self = .mediumHigh
      case 6: self = .high
      case 7: self = .veryHigh
      case 8: self = .highest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .lowest: return 1
      case .low: return 2
      case .lowMedium: return 3
      case .medium: return 4
      case .mediumHigh: return 5
      case .high: return 6
      case .veryHigh: return 7
      case .highest: return 8
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Org_Ena_Backend_Server_Protocols_TemporaryExposureKey.RiskLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Org_Ena_Backend_Server_Protocols_TemporaryExposureKey.RiskLevel] = [
    .invalid,
    .lowest,
    .low,
    .lowMedium,
    .medium,
    .mediumHigh,
    .high,
    .veryHigh,
    .highest,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.ena.backend.server.protocols"

extension Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemporaryExposureKeyBucket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shardKey"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "aggregationInterval"),
    4: .same(proto: "exposureKeys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.shardKey)
      case 2: try decoder.decodeSingularSFixed32Field(value: &self.timestamp)
      case 3: try decoder.decodeSingularEnumField(value: &self.aggregationInterval)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.exposureKeys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shardKey.isEmpty {
      try visitor.visitSingularStringField(value: self.shardKey, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularSFixed32Field(value: self.timestamp, fieldNumber: 2)
    }
    if self.aggregationInterval != .hourly {
      try visitor.visitSingularEnumField(value: self.aggregationInterval, fieldNumber: 3)
    }
    if !self.exposureKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exposureKeys, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket, rhs: Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket) -> Bool {
    if lhs.shardKey != rhs.shardKey {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.aggregationInterval != rhs.aggregationInterval {return false}
    if lhs.exposureKeys != rhs.exposureKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Ena_Backend_Server_Protocols_TemporaryExposureKeyBucket.AggregationInterval: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HOURLY"),
    1: .same(proto: "DAILY"),
  ]
}

extension Org_Ena_Backend_Server_Protocols_TemporaryExposureKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TemporaryExposureKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyData"),
    2: .same(proto: "rollingStartNumber"),
    3: .same(proto: "riskLevel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.keyData)
      case 2: try decoder.decodeSingularSFixed32Field(value: &self.rollingStartNumber)
      case 3: try decoder.decodeSingularEnumField(value: &self.riskLevel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyData.isEmpty {
      try visitor.visitSingularBytesField(value: self.keyData, fieldNumber: 1)
    }
    if self.rollingStartNumber != 0 {
      try visitor.visitSingularSFixed32Field(value: self.rollingStartNumber, fieldNumber: 2)
    }
    if self.riskLevel != .invalid {
      try visitor.visitSingularEnumField(value: self.riskLevel, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Org_Ena_Backend_Server_Protocols_TemporaryExposureKey, rhs: Org_Ena_Backend_Server_Protocols_TemporaryExposureKey) -> Bool {
    if lhs.keyData != rhs.keyData {return false}
    if lhs.rollingStartNumber != rhs.rollingStartNumber {return false}
    if lhs.riskLevel != rhs.riskLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Ena_Backend_Server_Protocols_TemporaryExposureKey.RiskLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RISK_LEVEL_INVALID"),
    1: .same(proto: "RISK_LEVEL_LOWEST"),
    2: .same(proto: "RISK_LEVEL_LOW"),
    3: .same(proto: "RISK_LEVEL_LOW_MEDIUM"),
    4: .same(proto: "RISK_LEVEL_MEDIUM"),
    5: .same(proto: "RISK_LEVEL_MEDIUM_HIGH"),
    6: .same(proto: "RISK_LEVEL_HIGH"),
    7: .same(proto: "RISK_LEVEL_VERY_HIGH"),
    8: .same(proto: "RISK_LEVEL_HIGHEST"),
  ]
}
